{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","placeholder","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","gif","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","img","GifExpertApp","c","ReactDOM","render","document","getElementById"],"mappings":"mMA+BeA,EA3BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAEnB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAc,SAAAS,GAAU,OAAMP,GAAN,mBAAqBO,OAC7CN,EAAc,MAKlB,SACI,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAdpB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,QAakDG,YAAY,2B,+BCtBhFC,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARvB,kBAYZM,GAZY,4CAAH,sDCcLO,EAZK,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAI7B,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCmBFO,EAxBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAKf,ECNwB,SAAEA,GAC1B,MAA0Bf,mBAAS,CAC/BsB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OAVAC,qBAAU,WAENxB,EAASC,GAAWwB,MAAM,SAAAC,GACtBH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGlB,CAAEpB,IAEEqB,EDd2BK,CAAa1B,GAAjCa,EAAd,EAAQN,KAAca,EAAtB,EAAsBA,QAEtB,OACI,qCACI,qBAAIJ,UAAU,oCAAd,cAAoDhB,EAApD,OACEoB,GAAW,mBAAGJ,UAAU,mCAAb,qBACb,sBAAKA,UAAU,YAAf,UACKH,EAAOJ,KAAI,SAACkB,GAIT,OAAO,cAAC,EAAD,eAA8BA,GAAZA,EAAIhB,OALrC,WEeGiB,EAxBM,WAEjB,MAAoC3C,mBAAS,CAAC,gBAA9C,mBAAOQ,EAAP,KAAmBT,EAAnB,KASA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BACKS,EAAWgB,KAAI,SAAAoB,GAAM,OAAO,cAAC,EAAD,CAAiB7B,SAAU6B,GAAbA,Y,MCnB3DC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d5d61b0c.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst AddCategory = ( {setCategories} ) => {\r\n    \r\n    const [inputValue, setInputValue] = useState('');\r\n    \r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if ( inputValue.trim().length > 2 ) {\r\n            setCategories(categories => [ inputValue, ...categories ]);\r\n            setInputValue('');\r\n        }\r\n    } \r\n    \r\n    return (\r\n        <form onSubmit={ handleSubmit } >\r\n            <input type=\"text\" value={inputValue} onChange={ handleInputChange } placeholder='Escribe una palabra' />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories : PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory\r\n","export const getGifs = async ( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=TZYoGACWJ4j75NFnBrokmU9N0eoR9CkV`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    const gifs = data.map((gif) => {\r\n        return {\r\n            id: gif.id,\r\n            title: gif.title,\r\n            url: gif.images?.downsized_medium.url\r\n        }\r\n    });\r\n    \r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nconst GifGridItem = ({id, title, url}) => {\r\n    \r\n    // console.log({id, title, url});\r\n    \r\n    return (\r\n        <div className='card animate__animated animate__fadeIn'>\r\n            <img src={ url } alt={ title } />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport GifGridItem from './GifGridItem';\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n    /**\r\n     * Use the customHook\r\n     */\r\n    const { data: images, loading } = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\"> {category} </h3>\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\r\n            <div className='card-grid'>\r\n                {images.map((img) => {\r\n                    // Se esta enviando cada una de las propiedades\r\n                    // de las imágenes como una propiedad independiente\r\n                    // con el operador spread\r\n                    return <GifGridItem key={img.id} {...img} />\r\n                }\r\n                )};\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    /**\r\n     * Execute the code of conditional way\r\n     * useEffect cannot be synchronous\r\n     */\r\n    useEffect(() => {\r\n        // Execute the instruction when the component is rendered for the first time\r\n        getGifs( category ).then( imgs => {\r\n            setstate({\r\n                data: imgs,\r\n                loading: false\r\n            })\r\n        } );\r\n    }, [ category ])\r\n\r\n    return state; // { data: [], loading: true }\r\n}","//rafce/rafc snipet to generet a new functional component\r\n\r\nimport React, { useState } from 'react'\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n    \r\n    const [categories, setCategories] = useState(['Dragon Ball']);\r\n    \r\n    // const handleAdd = () => {\r\n    //     // Méthod 1\r\n    //     setCategories([...categories, 'Hunter']);\r\n    //     // Méthod 2\r\n    //     // setCategories(categories => [...categories, 'Hunter']);\r\n    // }\r\n    \r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories } />\r\n            <hr />\r\n            {/* <button onClick={handleAdd}>Agregar</button> */}\r\n            <ol>\r\n                {categories.map(c => {return <GifGrid key={c} category={c}/>})}\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}